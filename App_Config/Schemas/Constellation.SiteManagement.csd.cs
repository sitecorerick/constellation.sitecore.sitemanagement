//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Constellation.Sitecore.SiteManagement
{
    
    
    /// <summary>
    /// The SiteManagementConfiguration Configuration Section.
    /// </summary>
    public partial class SiteManagementConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SiteManagementConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SiteManagementConfigurationSectionName = "siteManagement";
        
        /// <summary>
        /// Gets the SiteManagementConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration Instance
        {
            get
            {
                return ((global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.SiteManagementConfigurationSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region TransSiteRoles Property
        /// <summary>
        /// The XML name of the <see cref="TransSiteRoles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TransSiteRolesPropertyName = "transSiteRoles";
        
        /// <summary>
        /// Gets or sets the roles used by authors that have control of content across all sites
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The roles used by authors that have control of content across all sites")]
        [global::System.ComponentModel.DisplayNameAttribute("Examples: \"All Site News Author\", \"All Site News Approver\"")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.TransSiteRolesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Constellation.Sitecore.RoleRules TransSiteRoles
        {
            get
            {
                return ((global::Constellation.Sitecore.RoleRules)(base[global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.TransSiteRolesPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.TransSiteRolesPropertyName] = value;
            }
        }
        #endregion
        
        #region SiteBlueprints Property
        /// <summary>
        /// The XML name of the <see cref="SiteBlueprints"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SiteBlueprintsPropertyName = "siteBlueprints";
        
        /// <summary>
        /// Gets or sets the SiteBlueprints.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SiteBlueprints.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.SiteBlueprintsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Constellation.Sitecore.SiteBlueprints SiteBlueprints
        {
            get
            {
                return ((global::Constellation.Sitecore.SiteBlueprints)(base[global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.SiteBlueprintsPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.SiteBlueprintsPropertyName] = value;
            }
        }
        #endregion
        
        #region TargetSystems Property
        /// <summary>
        /// The XML name of the <see cref="TargetSystems"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TargetSystemsPropertyName = "targetSystems";
        
        /// <summary>
        /// Gets or sets the TargetSystems.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TargetSystems.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.TargetSystemsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Constellation.Sitecore.TargetSystems TargetSystems
        {
            get
            {
                return ((global::Constellation.Sitecore.TargetSystems)(base[global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.TargetSystemsPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteManagement.SiteManagementConfiguration.TargetSystemsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// A collection of RoleRule instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Constellation.Sitecore.RoleRule), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class RoleRules : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Constellation.Sitecore.RoleRule"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RoleRulePropertyName = "role";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Constellation.Sitecore.RoleRules.RoleRulePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Constellation.Sitecore.RoleRules.RoleRulePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Constellation.Sitecore.RoleRule)(element)).RoleName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Constellation.Sitecore.RoleRule"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Constellation.Sitecore.RoleRule"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Constellation.Sitecore.RoleRule();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.RoleRule"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.RoleRule"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.RoleRule this[int index]
        {
            get
            {
                return ((global::Constellation.Sitecore.RoleRule)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.RoleRule"/> with the specified key.
        /// </summary>
        /// <param name="roleName">The key of the <see cref="global::Constellation.Sitecore.RoleRule"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.RoleRule this[object roleName]
        {
            get
            {
                return ((global::Constellation.Sitecore.RoleRule)(base.BaseGet(roleName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Constellation.Sitecore.RoleRule"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="role">The <see cref="global::Constellation.Sitecore.RoleRule"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Constellation.Sitecore.RoleRule role)
        {
            base.BaseAdd(role);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Constellation.Sitecore.RoleRule"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="role">The <see cref="global::Constellation.Sitecore.RoleRule"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Constellation.Sitecore.RoleRule role)
        {
            base.BaseRemove(this.GetElementKey(role));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.RoleRule"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.RoleRule"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.RoleRule GetItemAt(int index)
        {
            return ((global::Constellation.Sitecore.RoleRule)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.RoleRule"/> with the specified key.
        /// </summary>
        /// <param name="roleName">The key of the <see cref="global::Constellation.Sitecore.RoleRule"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.RoleRule GetItemByKey(string roleName)
        {
            return ((global::Constellation.Sitecore.RoleRule)(base.BaseGet(((object)(roleName)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// The RoleRule Configuration Element.
    /// </summary>
    public partial class RoleRule : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region RoleName Property
        /// <summary>
        /// The XML name of the <see cref="RoleName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string RoleNamePropertyName = "roleName";
        
        /// <summary>
        /// Gets or sets the RoleName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The RoleName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.RoleRule.RoleNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string RoleName
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.RoleRule.RoleNamePropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.RoleRule.RoleNamePropertyName] = value;
            }
        }
        #endregion
        
        #region MemberOfTheseRoles Property
        /// <summary>
        /// The XML name of the <see cref="MemberOfTheseRoles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MemberOfTheseRolesPropertyName = "memberOfTheseRoles";
        
        /// <summary>
        /// Gets or sets a comma-delimited list of roles. The newly created role will become a member of these roles
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("A comma-delimited list of roles. The newly created role will become a member of t" +
            "hese roles")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.RoleRule.MemberOfTheseRolesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string MemberOfTheseRoles
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.RoleRule.MemberOfTheseRolesPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.RoleRule.MemberOfTheseRolesPropertyName] = value;
            }
        }
        #endregion
        
        #region AccessRights Property
        /// <summary>
        /// The XML name of the <see cref="AccessRights"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AccessRightsPropertyName = "accessRights";
        
        /// <summary>
        /// Gets or sets the AccessRights.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AccessRights.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.RoleRule.AccessRightsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Constellation.Sitecore.AccessRightRuleSettings AccessRights
        {
            get
            {
                return ((global::Constellation.Sitecore.AccessRightRuleSettings)(base[global::Constellation.Sitecore.RoleRule.AccessRightsPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.RoleRule.AccessRightsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// A collection of SiteBlueprint instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Constellation.Sitecore.SiteBlueprint), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Constellation.Sitecore.SiteBlueprints.SiteBlueprintPropertyName)]
    public partial class SiteBlueprints : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Constellation.Sitecore.SiteBlueprint"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SiteBlueprintPropertyName = "siteBlueprint";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Constellation.Sitecore.SiteBlueprints.SiteBlueprintPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Constellation.Sitecore.SiteBlueprints.SiteBlueprintPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Constellation.Sitecore.SiteBlueprint)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Constellation.Sitecore.SiteBlueprint"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Constellation.Sitecore.SiteBlueprint"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Constellation.Sitecore.SiteBlueprint();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.SiteBlueprint"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.SiteBlueprint"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.SiteBlueprint this[int index]
        {
            get
            {
                return ((global::Constellation.Sitecore.SiteBlueprint)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.SiteBlueprint"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Constellation.Sitecore.SiteBlueprint"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.SiteBlueprint this[object name]
        {
            get
            {
                return ((global::Constellation.Sitecore.SiteBlueprint)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Constellation.Sitecore.SiteBlueprint"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="siteBlueprint">The <see cref="global::Constellation.Sitecore.SiteBlueprint"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Constellation.Sitecore.SiteBlueprint siteBlueprint)
        {
            base.BaseAdd(siteBlueprint);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Constellation.Sitecore.SiteBlueprint"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="siteBlueprint">The <see cref="global::Constellation.Sitecore.SiteBlueprint"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Constellation.Sitecore.SiteBlueprint siteBlueprint)
        {
            base.BaseRemove(this.GetElementKey(siteBlueprint));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.SiteBlueprint"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.SiteBlueprint"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.SiteBlueprint GetItemAt(int index)
        {
            return ((global::Constellation.Sitecore.SiteBlueprint)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.SiteBlueprint"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Constellation.Sitecore.SiteBlueprint"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.SiteBlueprint GetItemByKey(string name)
        {
            return ((global::Constellation.Sitecore.SiteBlueprint)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// The SiteBlueprint Configuration Element.
    /// </summary>
    public partial class SiteBlueprint : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteBlueprint.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.SiteBlueprint.NamePropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteBlueprint.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region SiteRootMask Property
        /// <summary>
        /// The XML name of the <see cref="SiteRootMask"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SiteRootMaskPropertyName = "siteRootMask";
        
        /// <summary>
        /// Gets or sets the SiteRootMask.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SiteRootMask.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteBlueprint.SiteRootMaskPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string SiteRootMask
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.SiteBlueprint.SiteRootMaskPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteBlueprint.SiteRootMaskPropertyName] = value;
            }
        }
        #endregion
        
        #region SiteFolders Property
        /// <summary>
        /// The XML name of the <see cref="SiteFolders"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SiteFoldersPropertyName = "siteFolders";
        
        /// <summary>
        /// Gets or sets the SiteFolders.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SiteFolders.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::System.Configuration.WhiteSpaceTrimStringConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteBlueprint.SiteFoldersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Constellation.Sitecore.SiteFolders SiteFolders
        {
            get
            {
                return ((global::Constellation.Sitecore.SiteFolders)(base[global::Constellation.Sitecore.SiteBlueprint.SiteFoldersPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteBlueprint.SiteFoldersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// The SiteFolder Configuration Element.
    /// </summary>
    public partial class SiteFolder : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Path Property
        /// <summary>
        /// The XML name of the <see cref="Path"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PathPropertyName = "path";
        
        /// <summary>
        /// Gets or sets the Path.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Path.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::System.Configuration.WhiteSpaceTrimStringConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteFolder.PathPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false, DefaultValue="/sitecore/content")]
        public virtual string Path
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.SiteFolder.PathPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteFolder.PathPropertyName] = value;
            }
        }
        #endregion
        
        #region AddSubFolderForBlueprint Property
        /// <summary>
        /// The XML name of the <see cref="AddSubFolderForBlueprint"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AddSubFolderForBlueprintPropertyName = "addSubFolderForBlueprint";
        
        /// <summary>
        /// Gets or sets the AddSubFolderForBlueprint.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AddSubFolderForBlueprint.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteFolder.AddSubFolderForBlueprintPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool AddSubFolderForBlueprint
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.SiteFolder.AddSubFolderForBlueprintPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteFolder.AddSubFolderForBlueprintPropertyName] = value;
            }
        }
        #endregion
        
        #region AddSubFolderForSite Property
        /// <summary>
        /// The XML name of the <see cref="AddSubFolderForSite"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AddSubFolderForSitePropertyName = "addSubFolderForSite";
        
        /// <summary>
        /// Gets or sets the AddSubFolderForSite.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AddSubFolderForSite.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteFolder.AddSubFolderForSitePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool AddSubFolderForSite
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.SiteFolder.AddSubFolderForSitePropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteFolder.AddSubFolderForSitePropertyName] = value;
            }
        }
        #endregion
        
        #region SubFolderTemplateID Property
        /// <summary>
        /// The XML name of the <see cref="SubFolderTemplateID"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SubFolderTemplateIDPropertyName = "subFolderTemplateID";
        
        /// <summary>
        /// Gets or sets the SubFolderTemplateID.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SubFolderTemplateID.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteFolder.SubFolderTemplateIDPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="A87A00B1-E6DB-45AB-8B54-636FEC3B5523")]
        public virtual global::System.Guid SubFolderTemplateID
        {
            get
            {
                return ((global::System.Guid)(base[global::Constellation.Sitecore.SiteFolder.SubFolderTemplateIDPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteFolder.SubFolderTemplateIDPropertyName] = value;
            }
        }
        #endregion
        
        #region MarkProtected Property
        /// <summary>
        /// The XML name of the <see cref="MarkProtected"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MarkProtectedPropertyName = "markProtected";
        
        /// <summary>
        /// Gets or sets the MarkProtected.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MarkProtected.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteFolder.MarkProtectedPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool MarkProtected
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.SiteFolder.MarkProtectedPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteFolder.MarkProtectedPropertyName] = value;
            }
        }
        #endregion
        
        #region Icon Property
        /// <summary>
        /// The XML name of the <see cref="Icon"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IconPropertyName = "icon";
        
        /// <summary>
        /// Gets or sets the Icon.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Icon.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteFolder.IconPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="applications/16x16/folder.png")]
        public virtual string Icon
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.SiteFolder.IconPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteFolder.IconPropertyName] = value;
            }
        }
        #endregion
        
        #region SiteRoles Property
        /// <summary>
        /// The XML name of the <see cref="SiteRoles"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SiteRolesPropertyName = "siteSpecificRoles";
        
        /// <summary>
        /// Gets or sets the SiteRoles.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SiteRoles.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.SiteFolder.SiteRolesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Constellation.Sitecore.RoleRules SiteRoles
        {
            get
            {
                return ((global::Constellation.Sitecore.RoleRules)(base[global::Constellation.Sitecore.SiteFolder.SiteRolesPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.SiteFolder.SiteRolesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// A collection of AccessRightRuleSetting instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Constellation.Sitecore.AccessRightRuleSetting), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class AccessRightRuleSettings : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AccessRightRuleSettingPropertyName = "accessRight";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Constellation.Sitecore.AccessRightRuleSettings.AccessRightRuleSettingPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Constellation.Sitecore.AccessRightRuleSettings.AccessRightRuleSettingPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Constellation.Sitecore.AccessRightRuleSetting)(element)).AccessRight;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Constellation.Sitecore.AccessRightRuleSetting();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.AccessRightRuleSetting this[int index]
        {
            get
            {
                return ((global::Constellation.Sitecore.AccessRightRuleSetting)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> with the specified key.
        /// </summary>
        /// <param name="accessRight">The key of the <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.AccessRightRuleSetting this[object accessRight]
        {
            get
            {
                return ((global::Constellation.Sitecore.AccessRightRuleSetting)(base.BaseGet(accessRight)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="accessRight">The <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Constellation.Sitecore.AccessRightRuleSetting accessRight)
        {
            base.BaseAdd(accessRight);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="accessRight">The <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Constellation.Sitecore.AccessRightRuleSetting accessRight)
        {
            base.BaseRemove(this.GetElementKey(accessRight));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.AccessRightRuleSetting GetItemAt(int index)
        {
            return ((global::Constellation.Sitecore.AccessRightRuleSetting)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> with the specified key.
        /// </summary>
        /// <param name="accessRight">The key of the <see cref="global::Constellation.Sitecore.AccessRightRuleSetting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.AccessRightRuleSetting GetItemByKey(global::Constellation.Sitecore.SiteManagement.Configuration.ItemAccessRight accessRight)
        {
            return ((global::Constellation.Sitecore.AccessRightRuleSetting)(base.BaseGet(((object)(accessRight)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// The AccessRightRuleSetting Configuration Element.
    /// </summary>
    public partial class AccessRightRuleSetting : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AccessRight Property
        /// <summary>
        /// The XML name of the <see cref="AccessRight"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AccessRightPropertyName = "accessRight";
        
        /// <summary>
        /// Gets or sets item access right
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("Item access right")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.AccessRightRuleSetting.AccessRightPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual global::Constellation.Sitecore.SiteManagement.Configuration.ItemAccessRight AccessRight
        {
            get
            {
                return ((global::Constellation.Sitecore.SiteManagement.Configuration.ItemAccessRight)(base[global::Constellation.Sitecore.AccessRightRuleSetting.AccessRightPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.AccessRightRuleSetting.AccessRightPropertyName] = value;
            }
        }
        #endregion
        
        #region PropagationType Property
        /// <summary>
        /// The XML name of the <see cref="PropagationType"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PropagationTypePropertyName = "propagationType";
        
        /// <summary>
        /// Gets or sets the PropagationType.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The PropagationType.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.AccessRightRuleSetting.PropagationTypePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=global::Sitecore.Security.AccessControl.PropagationType.Any)]
        public virtual global::Sitecore.Security.AccessControl.PropagationType PropagationType
        {
            get
            {
                return ((global::Sitecore.Security.AccessControl.PropagationType)(base[global::Constellation.Sitecore.AccessRightRuleSetting.PropagationTypePropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.AccessRightRuleSetting.PropagationTypePropertyName] = value;
            }
        }
        #endregion
        
        #region AccessPermission Property
        /// <summary>
        /// The XML name of the <see cref="AccessPermission"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AccessPermissionPropertyName = "accessPermission";
        
        /// <summary>
        /// Gets or sets the AccessPermission.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The AccessPermission.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.AccessRightRuleSetting.AccessPermissionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=global::Sitecore.Security.AccessControl.AccessPermission.Allow)]
        public virtual global::Sitecore.Security.AccessControl.AccessPermission AccessPermission
        {
            get
            {
                return ((global::Sitecore.Security.AccessControl.AccessPermission)(base[global::Constellation.Sitecore.AccessRightRuleSetting.AccessPermissionPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.AccessRightRuleSetting.AccessPermissionPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// A collection of SiteFolder instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Constellation.Sitecore.SiteFolder), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class SiteFolders : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Constellation.Sitecore.SiteFolder"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SiteFolderPropertyName = "siteFolder";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Constellation.Sitecore.SiteFolders.SiteFolderPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Constellation.Sitecore.SiteFolders.SiteFolderPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Constellation.Sitecore.SiteFolder)(element)).Path;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Constellation.Sitecore.SiteFolder"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Constellation.Sitecore.SiteFolder"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Constellation.Sitecore.SiteFolder();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.SiteFolder"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.SiteFolder"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.SiteFolder this[int index]
        {
            get
            {
                return ((global::Constellation.Sitecore.SiteFolder)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.SiteFolder"/> with the specified key.
        /// </summary>
        /// <param name="path">The key of the <see cref="global::Constellation.Sitecore.SiteFolder"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.SiteFolder this[object path]
        {
            get
            {
                return ((global::Constellation.Sitecore.SiteFolder)(base.BaseGet(path)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Constellation.Sitecore.SiteFolder"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="siteFolder">The <see cref="global::Constellation.Sitecore.SiteFolder"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Constellation.Sitecore.SiteFolder siteFolder)
        {
            base.BaseAdd(siteFolder);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Constellation.Sitecore.SiteFolder"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="siteFolder">The <see cref="global::Constellation.Sitecore.SiteFolder"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Constellation.Sitecore.SiteFolder siteFolder)
        {
            base.BaseRemove(this.GetElementKey(siteFolder));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.SiteFolder"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.SiteFolder"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.SiteFolder GetItemAt(int index)
        {
            return ((global::Constellation.Sitecore.SiteFolder)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.SiteFolder"/> with the specified key.
        /// </summary>
        /// <param name="path">The key of the <see cref="global::Constellation.Sitecore.SiteFolder"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.SiteFolder GetItemByKey(string path)
        {
            return ((global::Constellation.Sitecore.SiteFolder)(base.BaseGet(((object)(path)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// The TargetSystem Configuration Element.
    /// </summary>
    public partial class TargetSystem : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SystemName Property
        /// <summary>
        /// The XML name of the <see cref="SystemName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SystemNamePropertyName = "systemName";
        
        /// <summary>
        /// Gets or sets the system name
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The system name")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.SystemNamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string SystemName
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.TargetSystem.SystemNamePropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.SystemNamePropertyName] = value;
            }
        }
        #endregion
        
        #region HostNameMask Property
        /// <summary>
        /// The XML name of the <see cref="HostNameMask"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HostNameMaskPropertyName = "hostNameMask";
        
        /// <summary>
        /// Gets or sets the host name mask, used when creating site definitions. Use $site to represent the site name portion of the mask.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The host name mask, used when creating site definitions. Use $site to represent t" +
            "he site name portion of the mask.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::System.Configuration.WhiteSpaceTrimStringConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.HostNameMaskPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string HostNameMask
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.TargetSystem.HostNameMaskPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.HostNameMaskPropertyName] = value;
            }
        }
        #endregion
        
        #region AllowDebug Property
        /// <summary>
        /// The XML name of the <see cref="AllowDebug"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AllowDebugPropertyName = "allowDebug";
        
        /// <summary>
        /// Gets or sets the allow debug flag for a site. Used when creating site definitions
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The allow debug flag for a site. Used when creating site definitions")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.AllowDebugPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool AllowDebug
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.TargetSystem.AllowDebugPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.AllowDebugPropertyName] = value;
            }
        }
        #endregion
        
        #region CacheHtml Property
        /// <summary>
        /// The XML name of the <see cref="CacheHtml"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string CacheHtmlPropertyName = "cacheHtml";
        
        /// <summary>
        /// Gets or sets the cache html flag for a site. Used when creating site definitions
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The cache html flag for a site. Used when creating site definitions")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.CacheHtmlPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool CacheHtml
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.TargetSystem.CacheHtmlPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.CacheHtmlPropertyName] = value;
            }
        }
        #endregion
        
        #region HtmlCacheSize Property
        /// <summary>
        /// The XML name of the <see cref="HtmlCacheSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HtmlCacheSizePropertyName = "htmlCacheSize";
        
        /// <summary>
        /// Gets or sets the html cache size for a site. Used when creating site definitions. Default is 25MB
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The html cache size for a site. Used when creating site definitions. Default is 2" +
            "5MB")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.HtmlCacheSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="25MB")]
        public virtual string HtmlCacheSize
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.TargetSystem.HtmlCacheSizePropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.HtmlCacheSizePropertyName] = value;
            }
        }
        #endregion
        
        #region EnablePreview Property
        /// <summary>
        /// The XML name of the <see cref="EnablePreview"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnablePreviewPropertyName = "enablePreview";
        
        /// <summary>
        /// Gets or sets the enable preview flag for a site. Used when creating site definitions
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The enable preview flag for a site. Used when creating site definitions")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.EnablePreviewPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool EnablePreview
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.TargetSystem.EnablePreviewPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.EnablePreviewPropertyName] = value;
            }
        }
        #endregion
        
        #region EnableWebEdit Property
        /// <summary>
        /// The XML name of the <see cref="EnableWebEdit"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnableWebEditPropertyName = "enableWebEdit";
        
        /// <summary>
        /// Gets or sets the EnableWebEdit.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EnableWebEdit.")]
        [global::System.ComponentModel.DisplayNameAttribute("The enable web edit flag for a site. Used when creating site definitions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.EnableWebEditPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool EnableWebEdit
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.TargetSystem.EnableWebEditPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.EnableWebEditPropertyName] = value;
            }
        }
        #endregion
        
        #region EnableDebugger Property
        /// <summary>
        /// The XML name of the <see cref="EnableDebugger"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnableDebuggerPropertyName = "enableDebugger";
        
        /// <summary>
        /// Gets or sets the enable debugger flag for a site. Used when creating site definitions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The enable debugger flag for a site. Used when creating site definitions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.EnableDebuggerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool EnableDebugger
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.TargetSystem.EnableDebuggerPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.EnableDebuggerPropertyName] = value;
            }
        }
        #endregion
        
        #region DisableClientData Property
        /// <summary>
        /// The XML name of the <see cref="DisableClientData"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DisableClientDataPropertyName = "disableClientData";
        
        /// <summary>
        /// Gets or sets the disable client data flag for a site. Used when creating site definitions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The disable client data flag for a site. Used when creating site definitions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystem.DisableClientDataPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool DisableClientData
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.TargetSystem.DisableClientDataPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystem.DisableClientDataPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Constellation.Sitecore
{
    
    
    /// <summary>
    /// A collection of TargetSystem instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Constellation.Sitecore.TargetSystem), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class TargetSystems : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Constellation.Sitecore.TargetSystem"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TargetSystemPropertyName = "targetSystem";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Constellation.Sitecore.TargetSystems.TargetSystemPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Constellation.Sitecore.TargetSystems.TargetSystemPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Constellation.Sitecore.TargetSystem)(element)).SystemName;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Constellation.Sitecore.TargetSystem"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Constellation.Sitecore.TargetSystem"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Constellation.Sitecore.TargetSystem();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.TargetSystem"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.TargetSystem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.TargetSystem this[int index]
        {
            get
            {
                return ((global::Constellation.Sitecore.TargetSystem)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.TargetSystem"/> with the specified key.
        /// </summary>
        /// <param name="systemName">The key of the <see cref="global::Constellation.Sitecore.TargetSystem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.TargetSystem this[object systemName]
        {
            get
            {
                return ((global::Constellation.Sitecore.TargetSystem)(base.BaseGet(systemName)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Constellation.Sitecore.TargetSystem"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="targetSystem">The <see cref="global::Constellation.Sitecore.TargetSystem"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Constellation.Sitecore.TargetSystem targetSystem)
        {
            base.BaseAdd(targetSystem);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Constellation.Sitecore.TargetSystem"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="targetSystem">The <see cref="global::Constellation.Sitecore.TargetSystem"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Constellation.Sitecore.TargetSystem targetSystem)
        {
            base.BaseRemove(this.GetElementKey(targetSystem));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.TargetSystem"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Constellation.Sitecore.TargetSystem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.TargetSystem GetItemAt(int index)
        {
            return ((global::Constellation.Sitecore.TargetSystem)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Constellation.Sitecore.TargetSystem"/> with the specified key.
        /// </summary>
        /// <param name="systemName">The key of the <see cref="global::Constellation.Sitecore.TargetSystem"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Constellation.Sitecore.TargetSystem GetItemByKey(string systemName)
        {
            return ((global::Constellation.Sitecore.TargetSystem)(base.BaseGet(((object)(systemName)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region PhysicalFolder Property
        /// <summary>
        /// The XML name of the <see cref="PhysicalFolder"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PhysicalFolderPropertyName = "physicalFolder";
        
        /// <summary>
        /// Gets or sets the physical folder path, used when creating site definitions. Use $site to represent the site name portion of the mask.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The physical folder path, used when creating site definitions. Use $site to repre" +
            "sent the site name portion of the mask.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystems.PhysicalFolderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="/")]
        public virtual string PhysicalFolder
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.TargetSystems.PhysicalFolderPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystems.PhysicalFolderPropertyName] = value;
            }
        }
        #endregion
        
        #region StartItem Property
        /// <summary>
        /// The XML name of the <see cref="StartItem"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StartItemPropertyName = "startItem";
        
        /// <summary>
        /// Gets or sets the start item for a site. Used when creating site definitions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The start item for a site. Used when creating site definitions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystems.StartItemPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="/home")]
        public virtual string StartItem
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.TargetSystems.StartItemPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystems.StartItemPropertyName] = value;
            }
        }
        #endregion
        
        #region Database Property
        /// <summary>
        /// The XML name of the <see cref="Database"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DatabasePropertyName = "database";
        
        /// <summary>
        /// Gets or sets the database for a site. Used when creating site definitions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The database for a site. Used when creating site definitions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystems.DatabasePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="web")]
        public virtual string Database
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.TargetSystems.DatabasePropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystems.DatabasePropertyName] = value;
            }
        }
        #endregion
        
        #region Domain Property
        /// <summary>
        /// The XML name of the <see cref="Domain"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DomainPropertyName = "domain";
        
        /// <summary>
        /// Gets or sets the security domain for a site. Used when creating site definitions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The security domain for a site. Used when creating site definitions.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystems.DomainPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="extranet")]
        public virtual string Domain
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.TargetSystems.DomainPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystems.DomainPropertyName] = value;
            }
        }
        #endregion
        
        #region LoginPage Property
        /// <summary>
        /// The XML name of the <see cref="LoginPage"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string LoginPagePropertyName = "loginPage";
        
        /// <summary>
        /// Gets or sets the login page path, used when creating site definitions. Use $site to represent the site name portion of the mask.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The login page path, used when creating site definitions. Use $site to represent " +
            "the site name portion of the mask.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystems.LoginPagePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="/login.aspx")]
        public virtual string LoginPage
        {
            get
            {
                return ((string)(base[global::Constellation.Sitecore.TargetSystems.LoginPagePropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystems.LoginPagePropertyName] = value;
            }
        }
        #endregion
        
        #region IncludeFormsRoot Property
        /// <summary>
        /// The XML name of the <see cref="IncludeFormsRoot"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IncludeFormsRootPropertyName = "includeFormsRoot";
        
        /// <summary>
        /// Gets or sets the FormsRoot attribute. Set it to true if Web Forms for Marketers is installed.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FormsRoot attribute. Set it to true if Web Forms for Marketers is installed.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Constellation.Sitecore.TargetSystems.IncludeFormsRootPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool IncludeFormsRoot
        {
            get
            {
                return ((bool)(base[global::Constellation.Sitecore.TargetSystems.IncludeFormsRootPropertyName]));
            }
            set
            {
                base[global::Constellation.Sitecore.TargetSystems.IncludeFormsRootPropertyName] = value;
            }
        }
        #endregion
    }
}
